// <auto-generated />
using System;
using AirlyAnalyzer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AirlyAnalyzer.Migrations.Weather
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20210502165218_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AirlyAnalyzer.Models.Weather.WeatherMeasurement", b =>
                {
                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Day")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Hour")
                        .HasColumnType("tinyint");

                    b.Property<int>("InstallationId")
                        .HasColumnType("int");

                    b.Property<short?>("AirlyCaqi")
                        .HasColumnType("smallint");

                    b.Property<byte>("CloudCover")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Humidity")
                        .HasColumnType("tinyint");

                    b.Property<float>("Pressure")
                        .HasColumnType("real");

                    b.Property<float>("Rain6h")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.Property<short>("WindDirection")
                        .HasColumnType("smallint");

                    b.Property<float>("WindGust")
                        .HasColumnType("real");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("Year", "Month", "Day", "Hour", "InstallationId");

                    b.ToTable("WeatherMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
