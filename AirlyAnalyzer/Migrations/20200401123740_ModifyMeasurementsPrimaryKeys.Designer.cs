// <auto-generated />
using System;
using AirlyAnalyzer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AirlyAnalyzer.Migrations
{
    [DbContext(typeof(AirlyContext))]
    [Migration("20200401123740_ModifyMeasurementsPrimaryKeys")]
    partial class ModifyMeasurementsPrimaryKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            modelBuilder.Entity("AirlyAnalyzer.Models.AirQualityForecast", b =>
                {
                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallationId")
                        .HasColumnType("int");

                    b.Property<double>("AirlyCaqiValue")
                        .HasColumnType("float");

                    b.Property<double>("Pm10Value")
                        .HasColumnType("float");

                    b.Property<double>("Pm25Value")
                        .HasColumnType("float");

                    b.Property<DateTime>("TillDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FromDateTime", "InstallationId");

                    b.ToTable("ArchiveForecasts");
                });

            modelBuilder.Entity("AirlyAnalyzer.Models.AirQualityForecastAccuracy", b =>
                {
                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallationId")
                        .HasColumnType("int");

                    b.Property<double>("AirlyCaqiAccuracy")
                        .HasColumnType("float");

                    b.Property<DateTime>("ForecastRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Pm10Accuracy")
                        .HasColumnType("float");

                    b.Property<double>("Pm25Accuracy")
                        .HasColumnType("float");

                    b.Property<DateTime>("TillDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FromDateTime", "InstallationId");

                    b.ToTable("ForecastAccuracyRates");
                });

            modelBuilder.Entity("AirlyAnalyzer.Models.AirQualityMeasurement", b =>
                {
                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallationId")
                        .HasColumnType("int");

                    b.Property<double>("AirlyCaqiValue")
                        .HasColumnType("float");

                    b.Property<double>("Pm10Value")
                        .HasColumnType("float");

                    b.Property<double>("Pm25Value")
                        .HasColumnType("float");

                    b.Property<DateTime>("TillDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FromDateTime", "InstallationId");

                    b.ToTable("ArchiveMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
